/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface YieldSpaceMockInterface extends utils.Interface {
  functions: {
    "doGetYieldExponent(uint256,uint256)": FunctionFragment;
    "doHTokenInForUnderlyingOut(uint256,uint256,uint256,uint256)": FunctionFragment;
    "doHTokenOutForUnderlyingIn(uint256,uint256,uint256,uint256)": FunctionFragment;
    "doUnderlyingInForHTokenOut(uint256,uint256,uint256,uint256)": FunctionFragment;
    "doUnderlyingOutForHTokenIn(uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "doGetYieldExponent"
      | "doHTokenInForUnderlyingOut"
      | "doHTokenOutForUnderlyingIn"
      | "doUnderlyingInForHTokenOut"
      | "doUnderlyingOutForHTokenIn"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "doGetYieldExponent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doHTokenInForUnderlyingOut",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doHTokenOutForUnderlyingIn",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doUnderlyingInForHTokenOut",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doUnderlyingOutForHTokenIn",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "doGetYieldExponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doHTokenInForUnderlyingOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doHTokenOutForUnderlyingIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doUnderlyingInForHTokenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doUnderlyingOutForHTokenIn",
    data: BytesLike
  ): Result;

  events: {};
}

export interface YieldSpaceMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YieldSpaceMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    doGetYieldExponent(
      timeToMaturity: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { a: BigNumber }>;

    doHTokenInForUnderlyingOut(
      normalizedUnderlyingReserves: BigNumberish,
      hTokenReserves: BigNumberish,
      normalizedUnderlyingOut: BigNumberish,
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { hTokenIn: BigNumber }>;

    doHTokenOutForUnderlyingIn(
      normalizedUnderlyingReserves: BigNumberish,
      hTokenReserves: BigNumberish,
      normalizedUnderlyingIn: BigNumberish,
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { hTokenOut: BigNumber }>;

    doUnderlyingInForHTokenOut(
      hTokenReserves: BigNumberish,
      normalizedUnderlyingReserves: BigNumberish,
      hTokenOut: BigNumberish,
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { normalizedUnderlyingIn: BigNumber }>;

    doUnderlyingOutForHTokenIn(
      hTokenReserves: BigNumberish,
      normalizedUnderlyingReserves: BigNumberish,
      hTokenIn: BigNumberish,
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { normalizedUnderlyingOut: BigNumber }>;
  };

  doGetYieldExponent(
    timeToMaturity: BigNumberish,
    g: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  doHTokenInForUnderlyingOut(
    normalizedUnderlyingReserves: BigNumberish,
    hTokenReserves: BigNumberish,
    normalizedUnderlyingOut: BigNumberish,
    timeToMaturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  doHTokenOutForUnderlyingIn(
    normalizedUnderlyingReserves: BigNumberish,
    hTokenReserves: BigNumberish,
    normalizedUnderlyingIn: BigNumberish,
    timeToMaturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  doUnderlyingInForHTokenOut(
    hTokenReserves: BigNumberish,
    normalizedUnderlyingReserves: BigNumberish,
    hTokenOut: BigNumberish,
    timeToMaturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  doUnderlyingOutForHTokenIn(
    hTokenReserves: BigNumberish,
    normalizedUnderlyingReserves: BigNumberish,
    hTokenIn: BigNumberish,
    timeToMaturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    doGetYieldExponent(
      timeToMaturity: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doHTokenInForUnderlyingOut(
      normalizedUnderlyingReserves: BigNumberish,
      hTokenReserves: BigNumberish,
      normalizedUnderlyingOut: BigNumberish,
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doHTokenOutForUnderlyingIn(
      normalizedUnderlyingReserves: BigNumberish,
      hTokenReserves: BigNumberish,
      normalizedUnderlyingIn: BigNumberish,
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doUnderlyingInForHTokenOut(
      hTokenReserves: BigNumberish,
      normalizedUnderlyingReserves: BigNumberish,
      hTokenOut: BigNumberish,
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doUnderlyingOutForHTokenIn(
      hTokenReserves: BigNumberish,
      normalizedUnderlyingReserves: BigNumberish,
      hTokenIn: BigNumberish,
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    doGetYieldExponent(
      timeToMaturity: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doHTokenInForUnderlyingOut(
      normalizedUnderlyingReserves: BigNumberish,
      hTokenReserves: BigNumberish,
      normalizedUnderlyingOut: BigNumberish,
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doHTokenOutForUnderlyingIn(
      normalizedUnderlyingReserves: BigNumberish,
      hTokenReserves: BigNumberish,
      normalizedUnderlyingIn: BigNumberish,
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doUnderlyingInForHTokenOut(
      hTokenReserves: BigNumberish,
      normalizedUnderlyingReserves: BigNumberish,
      hTokenOut: BigNumberish,
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doUnderlyingOutForHTokenIn(
      hTokenReserves: BigNumberish,
      normalizedUnderlyingReserves: BigNumberish,
      hTokenIn: BigNumberish,
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    doGetYieldExponent(
      timeToMaturity: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doHTokenInForUnderlyingOut(
      normalizedUnderlyingReserves: BigNumberish,
      hTokenReserves: BigNumberish,
      normalizedUnderlyingOut: BigNumberish,
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doHTokenOutForUnderlyingIn(
      normalizedUnderlyingReserves: BigNumberish,
      hTokenReserves: BigNumberish,
      normalizedUnderlyingIn: BigNumberish,
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doUnderlyingInForHTokenOut(
      hTokenReserves: BigNumberish,
      normalizedUnderlyingReserves: BigNumberish,
      hTokenOut: BigNumberish,
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doUnderlyingOutForHTokenIn(
      hTokenReserves: BigNumberish,
      normalizedUnderlyingReserves: BigNumberish,
      hTokenIn: BigNumberish,
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
